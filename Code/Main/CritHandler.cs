using ManagedBass;
using System;
using System.Collections.Generic;
using System.IO;
using Terraria;
using Terraria.Audio;
using Terraria.ID;
using Terraria.ModLoader;

namespace CritSounds
{
    public class StreamType
    {
        internal int MeleeStabCrits_Stream;
        internal int TypeRangedCrits_Stream;
        internal int TypeThrowingCrits_Stream;
        internal int TypeMagicCrits_Stream;
        internal int TypeMeleeCrits_Stream;
        internal int TypeSummonCrits_Stream;
        internal int TypeGenericCrits_Stream;
    }

    public class CritSFXHandler : ModPlayer
    {

        //Defines lists which are later used to contain file paths of all custom sounds
        internal List<string> MeleeStabCrits_Files;
        internal List<string> TypeRangedCrits_Files;
        internal List<string> TypeThrowingCrits_Files;
        internal List<string> TypeMagicCrits_Files;
        internal List<string> TypeMeleeCrits_Files;
        internal List<string> TypeSummonCrits_Files;
        internal List<string> TypeGenericCrits_Files;

        public void CheckDirectoriesForMods()
        {
            CritModdingDirectories CSDirFill = new();

            //Fills the previously-defined lists with path files to all custom sounds
            MeleeStabCrits_Files = new List<string>(Directory.GetFiles(CSDirFill.MeleeStabCrits_Path));
            TypeRangedCrits_Files = new List<string>(Directory.GetFiles(CSDirFill.TypeRangedCrits_Path));
            TypeThrowingCrits_Files = new List<string>(Directory.GetFiles(CSDirFill.TypeThrowingCrits_Path));
            TypeMagicCrits_Files = new List<string>(Directory.GetFiles(CSDirFill.TypeMagicCrits_Path));
            TypeMeleeCrits_Files = new List<string>(Directory.GetFiles(CSDirFill.TypeMeleeCrits_Path));
            TypeSummonCrits_Files = new List<string>(Directory.GetFiles(CSDirFill.TypeSummonCrits_Path));
            TypeGenericCrits_Files = new List<string>(Directory.GetFiles(CSDirFill.TypeGenericCrits_Path));
        }

        public override void OnEnterWorld(Player player)
        {
            if (!Directory.Exists(Main.SavePath + Path.DirectorySeparatorChar.ToString() + "Crit Sounds" + Path.DirectorySeparatorChar.ToString() + "Custom"))
            {
                CritModdingDirectories CSDirCheck = new();
                CSDirCheck.CreateDirectories();
            }
            CheckDirectoriesForMods();
        }

        //The amount of default sound effects for built-in crit types
        private readonly int Egg1_SFXCount = 18;
        private readonly int MeleeStabCrits_SFXCount = 4;
        private readonly int TypeRangedCrits_SFXCount = 5;
        private readonly int TypeThrowingCrits_SFXCount = 4;
        private readonly int TypeMagicCrits_SFXCount = 4;
        private readonly int TypeMeleeCrits_SFXCount = 4;
        private readonly int TypeSummonCrits_SFXCount = 4;
        private readonly int TypeGenericCrits_SFXCount = 6;

        //Melee hitbox (stab) crits
        public override void OnHitNPC(Item item, NPC target, int damage, float knockback, bool crit)
        {
            CritSoundsConfig csc = new();
            StreamType st = new();

            if (crit && csc.MeleeStabCrits_Enabled && item.type != ItemID.TheAxe)
            {
                //No mod files detected
                if (MeleeStabCrits_Files.Count == 0)
                {
                    Random RandomNumber = new();
                    //Generates a random number from 1 to the respective damage type's SFX count
                    int randNo = RandomNumber.Next(1, MeleeStabCrits_SFXCount);
                    //Generates a path to the sound by combining a predefined path and the generated random number
                    var currSound = "Sounds/Crits/Melee_Stab/MeleeStab_Crit0" + randNo;
                    //Plays the audio file with the path generated by the command above
                    SoundEngine.PlaySound(SoundLoader.GetLegacySoundSlot(Mod, (currSound)));
                }
                //At least one mod file exists.
                if (MeleeStabCrits_Files.Count != 0)
                {
                    _ = new StreamType().MeleeStabCrits_Stream;
                    st.MeleeStabCrits_Stream = Bass.CreateStream(MeleeStabCrits_Files[new Random().Next(MeleeStabCrits_Files.Count)]);
                    Bass.ChannelSetAttribute(st.MeleeStabCrits_Stream, ChannelAttribute.Volume, csc.Mod_MeleeStab_Volume);
                    Bass.ChannelPlay(st.MeleeStabCrits_Stream);
                }
                return;
            }
            if (crit && csc.MeleeStabCrits_Enabled && item.type == ItemID.TheAxe)
            {
                Random RandomNumber = new();
                int randNo = RandomNumber.Next(1, Egg1_SFXCount);
                var currSound = "Sounds/Crits/Eggs/EggSet01/ES1_" + randNo;
                SoundEngine.PlaySound(SoundLoader.GetLegacySoundSlot(Mod, currSound));
            }
        }

        public override void OnHitNPCWithProj(Projectile proj, NPC target, int damage, float knockback, bool crit)
        {
            StreamType st = new();
            CritSoundsConfig csc = new();

            if (crit && csc.ProjectileCrits_Enabled)
            {
                if (proj.DamageType == DamageClass.Ranged)
                {
                    if (TypeRangedCrits_Files.Count == 0)
                    {
                        Random RandomNumber = new();
                        int randNo = RandomNumber.Next(1, TypeRangedCrits_SFXCount);
                        var currSound = "Sounds/Crits/Projectiles/TypeRanged/Ranged_Crit0" + randNo;
                        SoundEngine.PlaySound(SoundLoader.GetLegacySoundSlot(Mod, currSound), target.position);
                    }

                    if (TypeRangedCrits_Files.Count != 0)
                    {
                        _ = new StreamType().TypeRangedCrits_Stream;
                        st.TypeRangedCrits_Stream = Bass.CreateStream(TypeRangedCrits_Files[new Random().Next(TypeRangedCrits_Files.Count)]);

                        Bass.ChannelSetAttribute(st.TypeRangedCrits_Stream, ChannelAttribute.Volume, csc.Mod_TypeRanged_Volume);
                        Bass.ChannelSetAttribute(st.TypeRangedCrits_Stream, ChannelAttribute.Pan, (target.position.X - Player.position.X) / (Main.screenWidth / 2));
                        Bass.ChannelPlay(st.TypeRangedCrits_Stream);
                    }
                    else
                    {
                        return;
                    }
                }
                if (proj.DamageType == DamageClass.Throwing)
                {

                    if (TypeThrowingCrits_Files.Count == 0)
                    {
                        Random RandomNumber = new();
                        int randNo = RandomNumber.Next(1, TypeThrowingCrits_SFXCount);
                        var currSound = "Sounds/Crits/Projectiles/TypeThrowing/Throwing_Crit0" + randNo;
                        SoundEngine.PlaySound(SoundLoader.GetLegacySoundSlot(Mod, currSound), target.position);
                    }

                    if (TypeThrowingCrits_Files.Count != 0)
                    {
                        _ = new StreamType().TypeThrowingCrits_Stream;
                        st.TypeThrowingCrits_Stream = Bass.CreateStream(TypeThrowingCrits_Files[new Random().Next(TypeThrowingCrits_Files.Count)]);

                        Bass.ChannelSetAttribute(st.TypeThrowingCrits_Stream, ChannelAttribute.Volume, csc.Mod_TypeThrowing_Volume);
                        Bass.ChannelSetAttribute(st.TypeThrowingCrits_Stream, ChannelAttribute.Pan, (target.position.X - Player.position.X) / (Main.screenWidth / 2));
                        Bass.ChannelPlay(st.TypeThrowingCrits_Stream);
                    }
                    else
                    {
                        return;
                    }
                }
                if (proj.DamageType == DamageClass.Magic)
                {
                    if (TypeMagicCrits_Files.Count == 0)
                    {
                        Random RandomNumber = new();
                        int randNo = RandomNumber.Next(1, TypeMagicCrits_SFXCount);
                        var currSound = "Sounds/Crits/Projectiles/TypeMagic/Magic_Crit0" + randNo;
                        SoundEngine.PlaySound(SoundLoader.GetLegacySoundSlot(Mod, currSound), target.position);
                    }
                    if (TypeMagicCrits_Files.Count != 0)
                    {
                        _ = new StreamType().TypeMagicCrits_Stream;
                        st.TypeMagicCrits_Stream = Bass.CreateStream(TypeMagicCrits_Files[new Random().Next(TypeMagicCrits_Files.Count)]);

                        Bass.ChannelSetAttribute(st.TypeMagicCrits_Stream, ChannelAttribute.Volume, csc.Mod_TypeMagic_Volume);
                        Bass.ChannelSetAttribute(st.TypeMagicCrits_Stream, ChannelAttribute.Pan, (target.position.X - Player.position.X) / (Main.screenWidth / 2));
                        Bass.ChannelPlay(st.TypeMagicCrits_Stream);
                    }
                    else
                    {
                        return;
                    }
                }
                if (proj.DamageType == DamageClass.Melee)
                {
                    if (TypeMeleeCrits_Files.Count == 0)
                    {
                        Random RandomNumber = new();
                        int randNo = RandomNumber.Next(1, TypeMeleeCrits_SFXCount);
                        var currSound = "Sounds/Crits/Projectiles/TypeMelee/Melee_Crit0" + randNo;
                        SoundEngine.PlaySound(SoundLoader.GetLegacySoundSlot(Mod, currSound), target.position);
                    }

                    if (TypeMeleeCrits_Files.Count != 0)
                    {
                        _ = new StreamType().TypeMeleeCrits_Stream;
                        st.TypeMeleeCrits_Stream = Bass.CreateStream(TypeMeleeCrits_Files[new Random().Next(TypeMeleeCrits_Files.Count)]);

                        Bass.ChannelSetAttribute(st.TypeMeleeCrits_Stream, ChannelAttribute.Volume, csc.Mod_TypeMelee_Volume);
                        Bass.ChannelSetAttribute(st.TypeMeleeCrits_Stream, ChannelAttribute.Pan, (target.position.X - Player.position.X) / (Main.screenWidth / 2));
                        Bass.ChannelPlay(st.TypeMeleeCrits_Stream);
                    }
                    else
                    {
                        return;
                    }
                }
                if (proj.DamageType == DamageClass.Summon)
                {
                    if (TypeSummonCrits_Files.Count == 0)
                    {
                        Random RandomNumber = new();
                        int randNo = RandomNumber.Next(1, TypeSummonCrits_SFXCount);
                        var currSound = "Sounds/Crits/Projectiles/TypeSummon/Summon_Crit0" + randNo;
                        SoundEngine.PlaySound(SoundLoader.GetLegacySoundSlot(Mod, currSound), target.position);
                    }
                    if (TypeSummonCrits_Files.Count != 0)
                    {
                        _ = new StreamType().TypeSummonCrits_Stream;
                        st.TypeSummonCrits_Stream = Bass.CreateStream(TypeSummonCrits_Files[new Random().Next(TypeSummonCrits_Files.Count)]);

                        Bass.ChannelSetAttribute(st.TypeSummonCrits_Stream, ChannelAttribute.Volume, csc.Mod_TypeSummon_Volume);
                        Bass.ChannelSetAttribute(st.TypeSummonCrits_Stream, ChannelAttribute.Pan, (target.position.X - Player.position.X) / (Main.screenWidth / 2));
                        Bass.ChannelPlay(st.TypeSummonCrits_Stream);
                    }
                    else
                    {
                        return;
                    }
                }
                if (proj.DamageType == DamageClass.Generic || proj.DamageType == DamageClass.NoScaling)
                {
                    if (TypeGenericCrits_Files.Count == 0)
                    {
                        Random RandomNumber = new();
                        int randNo = RandomNumber.Next(1, TypeGenericCrits_SFXCount);
                        var currSound = "Sounds/Crits/Projectiles/TypeGeneric/Generic_Crit0" + randNo;
                        SoundEngine.PlaySound(SoundLoader.GetLegacySoundSlot(Mod, currSound), target.position);
                    }
                    if (TypeGenericCrits_Files.Count != 0)
                    {
                        _ = new StreamType().TypeGenericCrits_Stream;
                        st.TypeGenericCrits_Stream = Bass.CreateStream(TypeGenericCrits_Files[new Random().Next(TypeGenericCrits_Files.Count)]);

                        Bass.ChannelSetAttribute(st.TypeGenericCrits_Stream, ChannelAttribute.Volume, csc.Mod_TypeGeneric_Volume);
                        Bass.ChannelSetAttribute(st.TypeGenericCrits_Stream, ChannelAttribute.Pan, (target.position.X - Player.position.X) / (Main.screenWidth / 2));
                        Bass.ChannelPlay(st.TypeGenericCrits_Stream);
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
}